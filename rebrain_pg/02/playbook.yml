- name: UBUNTU19
  hosts: U20
  become: true
  vars:
    - pg_ver: 13
    - pg_superuser: root
    - pg_db: rebrain_courses_db
    - pg_user: rebrain_admin
  tasks:
    - name: Get pgdg.list file stat
      stat: path=/etc/apt/sources.list.d/pgdg.list
      register: p
    - name: Create file if needed
      file: path=/etc/apt/sources.list.d/pgdg.list state=touch owner=root group=root mode=0644
      when: p.stat.exists is defined and not p.stat.exists
    - name: Create the file repository configuration
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/pgdg.list
        line: 'deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main'
        state: present
    - name: Import the repository signing key
      shell: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    - name: Update the package lists
      apt:
        update_cache: yes
        name: 
          - postgresql-{{ pg_ver }}
          - python3-pip
        state: present
    - name: install psycopg2-binary
      pip:
        name: psycopg2-binary
    - name: Create SUPER user
      become_user: postgres
      postgresql_user: 
        name: '{{ pg_superuser }}'
        password: ''
        db: postgres
        priv: ALL
        state: present
        role_attr_flags: SUPERUSER
    - name: Create database
      become_user: postgres
      postgresql_db:
        name: '{{ pg_db }}'
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        template: template0
    - name: Create user
      become_user: postgres
      postgresql_user:
        db: '{{ pg_db }}'
        name: '{{ pg_user }}'
        priv: CONNECT/ALL
        role_attr_flags: LOGIN
    - name: trust local connections
      lineinfile:
        path: /etc/postgresql/{{ pg_ver }}/main/pg_hba.conf
        regexp: 'host\s+all\s+all\s+127.0.0.1\/32'
        line: 'host  all  all 127.0.0.1/32 trust'
    - name: Apply pg config
      become_user: postgres
      postgresql_query:
        db: postgres
        query: select pg_reload_conf()
    - name: Create table users
      postgresql_table:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        table: users
        columns:
          - user_id SERIAL PRIMARY KEY NOT NULL
          - username varchar(50) NOT NULL
          - email varchar(50) NOT NULL
          - mobile_phone varchar(12) NOT NULL
          - firstname TEXT NOT NULL
          - lastname TEXT NOT NULL
          - city  TEXT
          - is_curator boolean NOT NULL
          - record_date timestamp NOT NULL DEFAULT now()
    - name: Create table cources
      postgresql_table:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        table: courses
        columns:
          - course_id SERIAL PRIMARY KEY NOT NULL
          - coursename varchar(50) NOT NULL
          - tasks_count INT NOT NULL
          - price INT NOT NULL
    - name: Create table users__courses
      postgresql_table:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        table: users__courses
        columns:
         - id SERIAL PRIMARY KEY NOT NULL
         - user_id INT NOT NULL
         - course_id INT NOT NULL
         - CONSTRAINT fk_user_id  FOREIGN KEY (user_id) REFERENCES users(user_id)
         - CONSTRAINT fk_course_id FOREIGN KEY (course_id) REFERENCES courses(course_id)
    - name: Copy sql data files
      copy:
        src: '{{ item }}'
        dest: ./files/
      with_fileglob:
        - '*.sql'
    - name: Check users table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        query: select count(*) from users
      register: users_result
#    - name: Fill tables
#      postgresql_query:
#        login_user: '{{ pg_user }}'
#        login_host: localhost
#        db: '{{ pg_db }}'
#        path_to_script: './files/table{{ item }}_data.sql'
#      with_sequence: 1-3
    - name: Fill users table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        path_to_script: './files/table1_data.sql'
      changed_when: 'users_result.query_result.count|int > 0'
    - name: Check courses table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        query: select count(*) from courses
      register: courses_result
    - name: Fill courses table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        path_to_script: './files/table2_data.sql'
      changed_when: 'courses_result.query_result.count|int > 0'
    - name: Check users__courses table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        query: select count(*) from users__courses
      register: users__courses_result
    - name: Fill courses table
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        path_to_script: './files/table3_data.sql'
      changed_when: 'users__courses_result.query_result.count|int > 0'
    - name: Check if user exists
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        query: select count(*) from users where email like 'Vladislav.Pirushin@gmail.com'
      register: user_exists_result
    - name: Insert user to table
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: INSERT INTO users(username, email, mobile_phone, firstname, lastname, city, is_curator) VALUES ('vladon', 'Vladislav.Pirushin@gmail.com', '+79817937545', 'Vladislav', 'Pirushin', NULL, false)
      changed_when: 'user_exists_result.query_result.count|int > 0'
    - name: Check if course exists
      postgresql_query:
        login_user: '{{ pg_user }}'
        login_host: localhost
        db: '{{ pg_db }}'
        query: select count(*) from courses where coursename like 'Postgresql'
      register: course_exists_result
    - debug:
        msg: '{{ course_exists_result.query_result }}'
    - name: Add course
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: INSERT INTO courses(coursename, tasks_count, price) VALUES ('Postgresql', 14, 7900)
      changed_when: 'course_exists_result.query_result.count|int > 0'
#    - name: Check if course exists for user
#      postgresql_query:
#        login_user: '{{ pg_user }}'
#        login_host: localhost
#        db: '{{ pg_db }}'
#        query: select count(*) from users__courses where 
#      register: course_exists_result
    - name: Add course for user
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: insert into users__courses(user_id, course_id) select u.user_id, c.course_id from users u, courses c where u.mobile_phone = '+79991916526' and c.coursename = 'Devops'
    - name: Creates directory
      file:
        path: /tmp/answers
        state: directory
    - name: task 13
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: select * from courses
      register: tast13_result
    - name: Save task 13 result to file
      copy: 
        content: '{{ tast13_result.query_result }}'
        dest: /tmp/answers/table2_courses_data
    - name: task 14
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: select username, mobile_phone from users
      register: task14_result
    - name: Save task 14 result to file
      copy:
        content: '{{ task14_result.query_result }}'
        dest: /tmp/answers/table1_usernames_and_phones
    - name: task 15
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{ pg_user }}'
        login_host: localhost
        query: delete from users where username = 'yodajedi'
    - name: task 16
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{  pg_user }}'
        login_host: localhost
        query: update courses set price = 10000 where coursename = 'Postgresql'
    - name: task 17
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{  pg_user }}'
        login_host: localhost
        query: update users set is_curator = true where firstname = 'Vladislav' and lastname = 'Pirushin'
    - name: task 18
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{  pg_user }}'
        login_host: localhost
        query: select * from courses c left outer join users__courses uc on c.course_id = uc.course_id
      register: task18_result
    - name: Save task 18 result to file
      copy:
        content: '{{ task18_result.query_result }}'
        dest: /tmp/answers/LEFT_OUTER_JOIN
    - name: task 19
      postgresql_query:
        db: '{{ pg_db }}'
        login_user: '{{  pg_user }}'
        login_host: localhost
        query: select * from users u right outer join users__courses uc on u.user_id = uc.user_id
      register: task19_result
    - name: Save task 19 result to file
      copy:
        content: '{{ task19_result.query_result }}'
        dest: /tmp/answers/RIGHT_OUTER_JOIN
    - name: task 20
      shell: pg_dump -U root rebrain_courses_db > rebrain_courses_db.sql.bqp
      register: task20_result
    - name: Copy backup file
      fetch:
        src: ./rebrain_courses_db.sql.bqp
        dest: ./files/
